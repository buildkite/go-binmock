// Code generated by go-bindata.
// sources:
// client/main.go
// DO NOT EDIT!

package binmock

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\x3d\x8b\x5f\xa1\xe9\x30\x48\x58\xe0\x60\xd7\x0c\x39\xac\x5b\x06\xe4\x32\x0c\x2b\x76\x2a\x7a\x70\x6d\x3a\xd3\xd6\x50\x1e\xc5\x78\x0b\x8a\xfc\xfb\x20\x29\x6e\x83\xc6\x69\x4f\x36\x9f\x1e\xf9\xf8\x48\xf6\x75\xf3\xbb\xde\xa0\xde\xd6\x9e\x00\xfc\xb6\x0f\x2c\xda\x82\x32\x48\x4d\x68\x3d\x6d\xe6\xbf\x62\x20\x03\xca\x74\x5b\x49\x1f\x42\x99\xff\x14\xe9\x0d\x80\x32\x77\x7b\xc1\x98\xd0\x10\x0d\x38\x80\xa1\x66\xed\x5b\x24\xf1\x9d\x47\xd6\x51\xd8\xd3\x26\xa3\x11\x79\x40\xfe\xc1\xf7\x23\x08\xdd\x8e\x9a\x2c\x6b\x9d\x7e\x00\x95\x64\xd6\x34\x84\xa6\x16\x1f\xe8\x3b\xfe\xd9\x61\x14\xbd\x58\xea\x33\xf0\xe1\x70\x81\x5d\xad\x5b\xbd\x3c\xd1\xbf\x44\xfb\xc8\x9b\xa8\x97\x3a\xc4\xfc\x77\xf3\x7e\x71\x7b\x89\xb9\xa2\xa1\x10\x57\x34\x78\x0e\x64\x1d\x80\xba\xdb\x75\x1d\x72\x6a\x2d\xdb\xaf\xbe\xe2\xdf\xab\x0c\x5d\x67\x67\xd6\x18\x07\xca\x77\x1a\x39\x93\x52\xe5\xc4\x59\xa5\x81\x22\xdb\x92\xee\xaa\x12\xdb\x49\x61\xf7\x21\x67\xbf\x59\x6a\xf2\xf7\x69\x3a\xaa\xaf\xc9\x37\x16\x99\x1d\xa8\x03\x80\x62\x8c\x7d\xa0\x88\xb3\x51\x26\xed\xa4\xfa\x16\xa2\x58\x93\x7e\x17\xf3\xb9\x79\xf7\x38\xf4\x99\x36\x66\xa6\x8f\xca\x8f\xcd\xbd\x50\xfe\x79\x57\x45\xec\xf9\x3a\x0a\x9a\xf6\x71\x6e\xf7\x33\x16\xbb\x63\xa3\xd5\x55\x68\xf7\xae\x2a\xb0\x7d\x3b\x2d\xf0\xba\xef\x6e\x2b\xd5\x97\x9e\x3d\x89\x0d\xb1\xba\x96\x36\xec\x64\xa6\xa7\xab\x1d\x9f\xdd\x44\x16\x32\xbf\x94\x55\xf4\xd2\xde\xff\x79\x39\x5b\xd1\x91\x97\xde\x3e\x85\x16\x1d\x1c\x00\x64\xdf\xe3\xf9\xa9\xa6\x63\xdf\x35\x92\x9c\xac\x5b\xad\xc7\xdb\x57\xf9\x02\x6f\x6e\xc7\x30\x9d\xd9\x53\x38\x55\xed\x38\xff\xa7\x72\xc5\xda\x49\xc9\xd2\xf5\x09\x30\xb6\xa7\x3d\x09\x1c\xe0\x7f\x00\x00\x00\xff\xff\x4a\x16\x13\x51\xe9\x03\x00\x00")

func clientMainGoBytes() ([]byte, error) {
	return bindataRead(
		_clientMainGo,
		"client/main.go",
	)
}

func clientMainGo() (*asset, error) {
	bytes, err := clientMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/main.go", size: 1001, mode: os.FileMode(420), modTime: time.Unix(1492782856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/main.go": clientMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"main.go": &bintree{clientMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

