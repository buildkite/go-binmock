// Code generated by go-bindata.
// sources:
// client/main.go
// DO NOT EDIT!

package binmock

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x51\xc1\x6e\x13\x31\x10\x3d\x7b\xbe\xc2\xf8\x80\x6c\x91\x78\xc5\x35\x28\x07\x0a\x45\xea\x05\x21\x2a\x4e\x88\xc3\x66\x77\x76\x6b\x9a\xf5\x2c\xe3\xd9\xd0\xaa\xca\xbf\x23\x7b\x93\x0a\x91\xa4\x9c\x6c\xbf\x99\x37\xef\xcd\xf3\x58\x37\xf7\x75\x8f\x7a\xa8\x43\x04\x08\xc3\x48\x2c\xda\x82\x32\x18\x1b\x6a\x43\xec\xab\x9f\x89\xa2\x01\x65\xba\x41\xf2\x11\x51\xaa\x3b\x91\xd1\x00\x28\xb3\x79\x14\x4c\x19\xa5\x54\xde\x7d\x90\xbb\x69\xe3\x1b\x1a\xaa\x31\xec\x48\xea\xed\xb2\xe9\x96\xf8\x30\x22\x87\x01\xa3\xd4\xdb\xaa\xa7\xe5\x26\xc4\x81\x9a\x7b\x03\x0e\x60\x57\xb3\x0e\x2d\x46\x09\x5d\x40\xd6\x49\x38\xc4\xbe\xa0\x09\x79\x87\xfc\x8d\xb7\x47\x10\xba\x29\x36\xc5\xa8\x75\xfa\x09\x54\x36\x76\x13\x77\xd4\xd4\x12\x28\x7e\xc5\x5f\x13\x26\xd1\xab\xb5\x3e\xcc\xf7\x27\xc5\xa7\xfd\x05\x96\xbf\x69\xf5\xfa\x2f\x1f\x97\xda\xde\x73\x9f\xf4\x5a\x53\x2a\xb7\xef\x6f\x57\x3f\x40\x6d\xa6\xae\x43\x2e\xba\x39\x0d\xff\x19\x7f\x5f\x15\xe8\xb6\xd8\xb6\xc6\x38\x50\xa1\xd3\xc8\xa5\x29\x0f\xce\x3d\xd7\x39\x5f\x64\x3b\xd3\x9d\x9f\xdf\xf6\xac\xae\x7b\x57\xd8\xaf\xd6\x3a\x86\x6d\x5e\x5d\x8d\x75\x0c\x8d\x45\x66\x07\x6a\x0f\xa0\x18\xd3\x48\x31\xe1\xe2\x28\x93\xbf\xc8\x7f\xa1\x24\xd6\xe4\xeb\xaa\xaa\xcc\x9b\xe7\x44\x17\xda\x98\x85\x3e\x28\x3f\x9b\x7b\x61\xfc\xbf\xae\x66\xb1\x4b\x59\xcf\xd5\x1c\xf6\xe9\xda\x1f\x71\x5e\xfb\x68\xd8\x5f\x51\xfb\xe8\xfc\x0c\xdb\xd7\xe7\x85\xfe\xbf\x7f\x37\x88\xff\x34\x72\x88\x62\x29\xf9\x5b\x69\x69\x92\x85\x3e\x3f\xed\x50\x76\x67\x58\xc8\xfc\x12\x6b\xd6\xa3\xe4\xaf\x1f\x82\x9c\x7c\xd5\xa1\x2f\xd7\x3e\x50\x8b\x0e\xf6\xf0\x27\x00\x00\xff\xff\x8b\x80\x09\xff\x5e\x03\x00\x00")

func clientMainGoBytes() ([]byte, error) {
	return bindataRead(
		_clientMainGo,
		"client/main.go",
	)
}

func clientMainGo() (*asset, error) {
	bytes, err := clientMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/main.go", size: 862, mode: os.FileMode(420), modTime: time.Unix(1492703546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/main.go": clientMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"main.go": &bintree{clientMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

