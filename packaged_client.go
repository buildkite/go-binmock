// Code generated by go-bindata.
// sources:
// client/main.go
// DO NOT EDIT!

package binmock

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x8f\xd3\x30\x10\x3d\x67\x7e\xc5\xe0\x03\xb2\x45\x95\x8a\x6b\x51\x0f\x2c\x14\xa9\x17\x84\x28\x9c\x56\x7b\x48\x93\x49\x31\x6c\xc7\xc1\x9e\x94\xad\x56\xfd\xef\xc8\x76\x52\xaa\xed\x07\xa7\xd8\xcf\x6f\xfc\xe6\xc5\x6f\xba\xaa\xfe\x55\x6d\x08\xb7\x95\x65\x00\xbb\xed\x9c\x17\xd4\x50\x28\xe2\xda\x35\x96\x37\xd3\x9f\xc1\xb1\x82\x42\xb5\x5b\x89\x1f\x26\x99\xfe\x10\xe9\x14\x40\xa1\xd6\x7d\x6b\x5d\x44\xd7\x7b\xa1\x10\x17\x2e\x28\x30\x00\xbb\xca\xa3\x6d\x88\xc5\xb6\x96\x3c\x06\xf1\x96\x37\x09\x0d\xe4\x77\xe4\xbf\xfb\xc7\x11\x84\xb6\xe7\x3a\xe9\x6b\x83\xcf\x50\x44\xbd\x25\xef\x5c\x5d\x89\x75\xfc\x95\x7e\xf7\x14\x04\x67\x73\x3c\x03\x9f\x0f\x57\xd8\xe5\xb2\xc1\xf9\x89\xfe\x35\xda\x7b\xbf\x09\x38\x47\x17\xd2\xea\xfe\xed\xec\xe1\x1a\x73\xc1\xbb\x4c\x5c\xf0\xce\x7a\xc7\xda\x00\x14\xa1\xae\x98\xc9\xc7\xde\xd2\x8f\x28\x3f\xd3\x9f\x55\xc6\xb4\x0b\xe5\x4a\x1a\xcb\x06\x8a\xd6\x79\x1c\xa8\x65\x3c\xce\x36\xaf\x08\xa5\x22\x9c\x63\xd5\x75\xc4\x8d\xbe\x41\x9a\x1c\x2f\xfd\x46\x4f\xa2\x8d\x81\xe2\x00\x50\xac\xfb\xb6\x1d\x7a\x8a\x6f\x12\x7b\xba\x4b\xd0\x2a\xfd\x6e\xad\x94\x81\xc2\xb6\x48\x3e\x91\xa2\x40\xe4\x2c\xe2\x73\x93\xd7\xb9\xdc\x94\x79\x7f\x59\xdf\xbc\x4b\xd5\xaf\xe6\xc8\xf6\x31\x79\xe9\x2a\xb6\xb5\x26\xef\x87\x26\x3c\x85\xce\x71\xa0\xc9\x28\x13\x13\x53\x7e\x71\x41\xb4\x8a\xcb\xd9\x74\xaa\xde\x1c\x93\x30\x41\xa5\x26\x38\x28\x1f\x9b\xbb\x71\xfd\xcb\xae\xb2\xd8\xcb\x8c\x64\x34\x86\xe4\xdc\xee\x47\xca\x76\xc7\x46\xcb\x3b\xd7\xec\x4d\x99\x61\xfd\xfa\xb2\xc0\xff\x7d\xb7\x5b\x29\x3f\x75\xde\xb2\x0c\x01\x70\xbd\x4c\xf0\xf2\x6d\xc3\xb1\xb9\x50\x45\xde\xdf\xaa\xca\x7a\x31\x8c\x4f\x56\xce\x9e\x68\xe0\xc5\xb3\x0f\xae\x21\x03\x07\x00\xd9\x77\x74\x3e\x3f\x71\x02\xfb\x5a\xa2\x93\x65\x83\x88\xe3\x44\x16\x69\x2e\xf0\xfe\x61\xdc\xc7\xf4\x9f\xee\x73\x48\x8f\xfb\x4b\x02\xc3\x93\xfc\x53\xc8\x6e\x4f\x44\xb2\x91\x13\x60\xec\x18\x2d\x0b\x1c\xe0\x6f\x00\x00\x00\xff\xff\x8f\xf2\xe6\xde\x9a\x04\x00\x00")

func clientMainGoBytes() ([]byte, error) {
	return bindataRead(
		_clientMainGo,
		"client/main.go",
	)
}

func clientMainGo() (*asset, error) {
	bytes, err := clientMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/main.go", size: 1178, mode: os.FileMode(420), modTime: time.Unix(1500024438, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/main.go": clientMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"main.go": &bintree{clientMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

